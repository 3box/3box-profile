"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shortenEthAddr = exports.formatIpfsImageObject = exports.capitalizeFirstLetter = exports.editProfileFields = exports.copyToClipBoard = void 0;

var copyToClipBoard = function copyToClipBoard(addr) {
  try {
    var textArea = document.createElement('textarea');
    textArea.value = addr;
    document.body.appendChild(textArea);
    textArea.focus({
      preventScroll: true
    });
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
  } catch (err) {
    console.error('Unable to copy', err);
  }
}; // the first field after emoji is the one that doesnt save


exports.copyToClipBoard = copyToClipBoard;
var editProfileFields = [['emoji', 'public'], ['verifiedGithub', 'public'], ['verifiedTwitter', 'public'], ['verifiedEmail', 'private'], ['name', 'public'], ['description', 'public'], ['image', 'public'], ['coverPhoto', 'public']];
exports.editProfileFields = editProfileFields;

var capitalizeFirstLetter = function capitalizeFirstLetter(string) {
  var capitalized = string.charAt(0).toUpperCase() + string.substring(1);
  return capitalized;
};

exports.capitalizeFirstLetter = capitalizeFirstLetter;

var formatIpfsImageObject = function formatIpfsImageObject(returnedData) {
  var format = [{
    '@type': 'ImageObject',
    contentUrl: {
      '/': returnedData.Hash
    }
  }];
  return format;
};

exports.formatIpfsImageObject = formatIpfsImageObject;

var shortenEthAddr = function shortenEthAddr(str) {
  var shortenStr = str && "".concat(str.substring(0, 5), "...").concat(str.substring(str.length - 5, str.length));
  return shortenStr;
};

exports.shortenEthAddr = shortenEthAddr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjb3B5VG9DbGlwQm9hcmQiLCJhZGRyIiwidGV4dEFyZWEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJlZGl0UHJvZmlsZUZpZWxkcyIsImNhcGl0YWxpemVGaXJzdExldHRlciIsInN0cmluZyIsImNhcGl0YWxpemVkIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJmb3JtYXRJcGZzSW1hZ2VPYmplY3QiLCJyZXR1cm5lZERhdGEiLCJmb3JtYXQiLCJjb250ZW50VXJsIiwiSGFzaCIsInNob3J0ZW5FdGhBZGRyIiwic3RyIiwic2hvcnRlblN0ciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3ZDLE1BQUk7QUFDRixRQUFNQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixVQUF2QixDQUFqQjtBQUVBRixJQUFBQSxRQUFRLENBQUNHLEtBQVQsR0FBaUJKLElBQWpCO0FBRUFFLElBQUFBLFFBQVEsQ0FBQ0csSUFBVCxDQUFjQyxXQUFkLENBQTBCTCxRQUExQjtBQUNBQSxJQUFBQSxRQUFRLENBQUNNLEtBQVQsQ0FBZTtBQUNiQyxNQUFBQSxhQUFhLEVBQUU7QUFERixLQUFmO0FBR0FQLElBQUFBLFFBQVEsQ0FBQ1EsTUFBVDtBQUNBUCxJQUFBQSxRQUFRLENBQUNRLFdBQVQsQ0FBcUIsTUFBckI7QUFFQVIsSUFBQUEsUUFBUSxDQUFDRyxJQUFULENBQWNNLFdBQWQsQ0FBMEJWLFFBQTFCO0FBQ0QsR0FiRCxDQWFFLE9BQU9XLEdBQVAsRUFBWTtBQUNaQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYyxnQkFBZCxFQUFnQ0YsR0FBaEM7QUFDRDtBQUNGLENBakJNLEMsQ0FtQlA7Ozs7QUFDTyxJQUFNRyxpQkFBaUIsR0FBRyxDQUMvQixDQUFDLE9BQUQsRUFBVSxRQUFWLENBRCtCLEVBRS9CLENBQUMsZ0JBQUQsRUFBbUIsUUFBbkIsQ0FGK0IsRUFHL0IsQ0FBQyxpQkFBRCxFQUFvQixRQUFwQixDQUgrQixFQUkvQixDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FKK0IsRUFLL0IsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUwrQixFQU0vQixDQUFDLGFBQUQsRUFBZ0IsUUFBaEIsQ0FOK0IsRUFPL0IsQ0FBQyxPQUFELEVBQVUsUUFBVixDQVArQixFQVEvQixDQUFDLFlBQUQsRUFBZSxRQUFmLENBUitCLENBQTFCOzs7QUFXQSxJQUFNQyxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLENBQUNDLE1BQUQsRUFBWTtBQUMvQyxNQUFNQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsTUFBUCxDQUFjLENBQWQsRUFBaUJDLFdBQWpCLEtBQWlDSCxNQUFNLENBQUNJLFNBQVAsQ0FBaUIsQ0FBakIsQ0FBckQ7QUFDQSxTQUFPSCxXQUFQO0FBQ0QsQ0FITTs7OztBQUtBLElBQU1JLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsQ0FBQ0MsWUFBRCxFQUFrQjtBQUNyRCxNQUFNQyxNQUFNLEdBQUcsQ0FBQztBQUNkLGFBQVMsYUFESztBQUVkQyxJQUFBQSxVQUFVLEVBQUU7QUFDVixXQUFLRixZQUFZLENBQUNHO0FBRFI7QUFGRSxHQUFELENBQWY7QUFPQSxTQUFPRixNQUFQO0FBQ0QsQ0FUTTs7OztBQVdBLElBQU1HLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsR0FBRCxFQUFTO0FBQ3JDLE1BQU1DLFVBQVUsR0FBR0QsR0FBRyxjQUFPQSxHQUFHLENBQUNQLFNBQUosQ0FBYyxDQUFkLEVBQWlCLENBQWpCLENBQVAsZ0JBQWdDTyxHQUFHLENBQUNQLFNBQUosQ0FBY08sR0FBRyxDQUFDRSxNQUFKLEdBQWEsQ0FBM0IsRUFBOEJGLEdBQUcsQ0FBQ0UsTUFBbEMsQ0FBaEMsQ0FBdEI7QUFDQSxTQUFPRCxVQUFQO0FBQ0QsQ0FITSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjb3B5VG9DbGlwQm9hcmQgPSAoYWRkcikgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcblxuICAgIHRleHRBcmVhLnZhbHVlID0gYWRkcjtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEFyZWEpO1xuICAgIHRleHRBcmVhLmZvY3VzKHtcbiAgICAgIHByZXZlbnRTY3JvbGw6IHRydWUsXG4gICAgfSk7XG4gICAgdGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGV4dEFyZWEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY29weScsIGVycik7XG4gIH1cbn07XG5cbi8vIHRoZSBmaXJzdCBmaWVsZCBhZnRlciBlbW9qaSBpcyB0aGUgb25lIHRoYXQgZG9lc250IHNhdmVcbmV4cG9ydCBjb25zdCBlZGl0UHJvZmlsZUZpZWxkcyA9IFtcbiAgWydlbW9qaScsICdwdWJsaWMnXSxcbiAgWyd2ZXJpZmllZEdpdGh1YicsICdwdWJsaWMnXSxcbiAgWyd2ZXJpZmllZFR3aXR0ZXInLCAncHVibGljJ10sXG4gIFsndmVyaWZpZWRFbWFpbCcsICdwcml2YXRlJ10sXG4gIFsnbmFtZScsICdwdWJsaWMnXSxcbiAgWydkZXNjcmlwdGlvbicsICdwdWJsaWMnXSxcbiAgWydpbWFnZScsICdwdWJsaWMnXSxcbiAgWydjb3ZlclBob3RvJywgJ3B1YmxpYyddLFxuXTtcblxuZXhwb3J0IGNvbnN0IGNhcGl0YWxpemVGaXJzdExldHRlciA9IChzdHJpbmcpID0+IHtcbiAgY29uc3QgY2FwaXRhbGl6ZWQgPSBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyaW5nKDEpO1xuICByZXR1cm4gY2FwaXRhbGl6ZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRJcGZzSW1hZ2VPYmplY3QgPSAocmV0dXJuZWREYXRhKSA9PiB7XG4gIGNvbnN0IGZvcm1hdCA9IFt7XG4gICAgJ0B0eXBlJzogJ0ltYWdlT2JqZWN0JyxcbiAgICBjb250ZW50VXJsOiB7XG4gICAgICAnLyc6IHJldHVybmVkRGF0YS5IYXNoXG4gICAgfVxuICB9XTtcblxuICByZXR1cm4gZm9ybWF0O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3J0ZW5FdGhBZGRyID0gKHN0cikgPT4ge1xuICBjb25zdCBzaG9ydGVuU3RyID0gc3RyICYmIGAke3N0ci5zdWJzdHJpbmcoMCwgNSl9Li4uJHtzdHIuc3Vic3RyaW5nKHN0ci5sZW5ndGggLSA1LCBzdHIubGVuZ3RoKX1gO1xuICByZXR1cm4gc2hvcnRlblN0cjtcbn07Il19